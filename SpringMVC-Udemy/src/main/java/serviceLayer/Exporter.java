package serviceLayer;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import com.csvreader.CsvWriter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import domainLayer.Book;
import domainLayer.OperationResult;
import domainLayer.Status;

public class Exporter {

	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font normalFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public static OperationResult generateReport(String path, boolean pdf, boolean csv, ArrayList<Book> emptyBooks) {

		try {
			if (pdf) {
				generatePdf(path, emptyBooks);
			}

			if (csv) {
				generateCsv(path, emptyBooks);
			}

			return new OperationResult(Status.SUCCESS, "Export successful");

		} catch (DocumentException e) {
			return new OperationResult(Status.FAILURE, "Document generation process encountered an error");
		} catch (FileNotFoundException e) {
			return new OperationResult(Status.FAILURE, "Invalid path");
		} catch (IOException e) {
			return new OperationResult(Status.FAILURE, "Document generation process encountered an error");
			
		}
		
	}

	public static void generateCsv(String path, ArrayList<Book> emptyBooks) throws IOException {

		SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
		Date now = new Date();
		String strDate = sdfDate.format(now);

		String filePath = path + "\\BookReport_" + strDate + ".csv";

		// use FileWriter constructor that specifies open for appending
		CsvWriter csvOutput = new CsvWriter(new FileWriter(filePath, true), ',');

		// else assume that the file already has the correct header line

		// write out a few records
		csvOutput.write("id");
		csvOutput.write("title");
		csvOutput.write("genre");
		csvOutput.write("author");
		csvOutput.write("price");
		csvOutput.endRecord();
			
		for(Book book: emptyBooks){
			csvOutput.write(""+book.getId());
			csvOutput.write(book.getTitle());
			csvOutput.write(book.getGenre());
			csvOutput.write(book.getAuthor());
			csvOutput.write(""+book.getPrice());
			csvOutput.endRecord();
		}
	

		csvOutput.close();
	}

	public static void generatePdf(String path, ArrayList<Book> emptyBooks)
			throws FileNotFoundException, DocumentException {

		SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
		Date now = new Date();
		String strDate = sdfDate.format(now);

		String filePath = path + "\\BookReport_" + strDate + ".pdf";

		Document document = new Document();
		PdfWriter.getInstance(document, new FileOutputStream(filePath));
		document.open();
		addTitlePage(document, emptyBooks);
		document.close();
	}

	private static void addTitlePage(Document document, ArrayList<Book> emptyBooks) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Out of stock books report", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated at: " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$
																		// //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 2);

		if (emptyBooks.isEmpty()) {
			preface.add(new Paragraph("There are 0 books out of stock ", normalFont));
		} else {
			preface.add(new Paragraph("There are " + emptyBooks.size() + " books out of stock ", normalFont));

			for (Book book : emptyBooks) {
				preface.add(new Paragraph(book.toString(), normalFont));
			}
		}

		addEmptyLine(preface, 8);

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

}
